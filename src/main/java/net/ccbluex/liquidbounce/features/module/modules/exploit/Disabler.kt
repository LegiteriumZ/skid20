package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.event.EventTarget
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.event.WorldEvent
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.features.module.ModuleInfo
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.ccbluex.liquidbounce.utils.misc.RandomUtils
import net.ccbluex.liquidbounce.utils.timer.MSTimer
import net.ccbluex.liquidbounce.value.BoolValue
import net.ccbluex.liquidbounce.value.IntegerValue
import net.ccbluex.liquidbounce.value.ListValue
import net.minecraft.entity.player.PlayerCapabilities
import net.minecraft.network.Packet
import net.minecraft.network.play.INetHandlerPlayServer
import net.minecraft.network.play.client.*
import net.minecraft.network.play.client.C03PacketPlayer.*
import net.minecraft.network.play.server.S08PacketPlayerPosLook
import kotlin.math.pow
import kotlin.math.roundToInt
import kotlin.math.sqrt

@ModuleInfo(name = "Disabler", category = ModuleCategory.EXPLOIT)
class Disabler : Module() {
    private val modeValue=ListValue("Mode",arrayOf("MineplexCombat","OldVerusCombat","OldVerusCombat2","OldVerusMove","Flying","Riding","Spectate","SpectateSpoof","SpectateSpoof2","VulcanGeyser","C13+InfiniteC0C","NoGroundTouch","OldMatrix","Kauri","FakeLag","HypixelTimer"),"MinePlexCombat")
    private val debug = BoolValue("Debug", false)
    private val memeAACValue = BoolValue("OldMatrixWithAAC5", false).displayable{ modeValue.equals("OldMatrix") }
    private val fakeLagPosValue = BoolValue("FakeLagPosition", true).displayable{ modeValue.equals("FakeLag") }
    private val fakeLagBlockValue = BoolValue("FakeLagBlock", true).displayable{ modeValue.equals("FakeLag") }
    private val fakeLagAttackValue = BoolValue("FakeLagAttack", true).displayable{ modeValue.equals("FakeLag") }
    private val fakeLagSpoofValue = BoolValue("FakeLagC03Spoof", false).displayable{ modeValue.equals("FakeLag") }
    private val lagDelayValue = IntegerValue("LagDelay",0,0,2000).displayable{ modeValue.equals("FakeLag") }
    private val lagDurationValue = IntegerValue("LagDuration",200,100,1000).displayable{ modeValue.equals("FakeLag") }

    private var verus2Stat=false
    private var packetBuffer=mutableListOf<Packet<INetHandlerPlayServer>>()
    private var currentTrans=0
    private var memeTick=0
    private var isSent=false
    private val fakeLagDelay = MSTimer()
    private val fakeLagDuration = MSTimer()

    private val c0fs=mutableListOf<Packet<INetHandlerPlayServer>>()
    private val c00s=mutableListOf<Packet<INetHandlerPlayServer>>()

    override fun onEnable() {
        reset()
    }
    
    override fun onDisable() {
        when(modeValue.get().lowercase()){
            "oldmatrix" -> {
                for(packet in packetBuffer){
                    PacketUtils.sendPacketNoEvent(packet)
                }
                packetBuffer.clear()
            }
            "fakelag" -> {
                for(packet in packetBuffer){
                    PacketUtils.sendPacketNoEvent(packet)
                }
                packetBuffer.clear()
            }
        }
    }

    @EventTarget
    fun onWorld(event: WorldEvent){
        reset()
    }

    private fun reset(){
        memeTick=0
        currentTrans=0
        verus2Stat=false
        packetBuffer.clear()
        fakeLagDelay.reset()
        fakeLagDuration.reset()
    }

    @EventTarget
    fun onUpdate(event: UpdateEvent){
        when(modeValue.get().lowercase()){
            "oldveruscombat2" -> {
                mc.timer.timerSpeed = 0.6F
                if (mc.thePlayer.ticksExisted % 50 == 0 && (packetBuffer.size - 1) > currentTrans) {
                    verus2Stat = true
                    PacketUtils.sendPacketNoEvent(packetBuffer[++currentTrans])
                    debugMessage("Send Trans")
                }
                if (mc.thePlayer.ticksExisted % 500 == 0) {
                    packetBuffer.clear()
                    debugMessage("Clear Trans")
                    currentTrans = 0
                }
            }

            "oldverusmove" -> {
                // Partially drain the queue every 180 ticks (9 seconds), to prevent flagging Ping Spoof.
                if (mc.thePlayer.ticksExisted % 180 == 0) {
                    // grab packets untill the queue size is 22 or less.
                    while (packetBuffer.size > 22) {
                        // grab 1 packet, send and then remove it from the queue
                        PacketUtils.sendPacketNoEvent(packetBuffer[0])
                        packetBuffer.removeAt(0)
                    }
                }
            }
            "oldmatrix" -> {
                memeTick++
                val cTick=if(memeAACValue.get()){
                    (mc.timer.timerSpeed.toDouble().pow(2.0)*10).roundToInt()
                }else{
                    (mc.timer.timerSpeed.toDouble().pow(2.0)*7.6).roundToInt()
                }
                if(memeTick>=cTick){
                    memeTick=0
                    for(packet in packetBuffer){
                        PacketUtils.sendPacketNoEvent(packet)
                    }

                    debugMessage("Release buf(size=${packetBuffer.size}, cTick=$cTick)")
                    packetBuffer.clear()
                }
            }
            
            "fakelag" -> {
                if(!fakeLagDelay.hasTimePassed(lagDelayValue.get().toLong())) fakeLagDuration.reset()
                //Send
                if(fakeLagDuration.hasTimePassed(lagDurationValue.get().toLong())) {
                    fakeLagDelay.reset()
                    fakeLagDuration.reset()
                    for(packet in packetBuffer){
                        PacketUtils.sendPacketNoEvent(packet)
                    }
                    debugMessage("Release buf(size=${packetBuffer.size})")
                    isSent=true
                    packetBuffer.clear()
                }
            }
        }
    }


    @EventTarget
    fun onPacket(event: PacketEvent){
        val packet=event.packet

        when(modeValue.get().lowercase()){
            "mineplexcombat" -> {
                if (packet is C00PacketKeepAlive) {
                    event.cancelEvent()
                    PacketUtils.sendPacketNoEvent(C00PacketKeepAlive(packet.key-RandomUtils.nextInt(1000, 2147483647)))
                    debugMessage("Packet C00")
                }
            }

            "hypixeltimer" -> {
                if (packet is C0FPacketConfirmTransaction) {
                    if(c0fs.size>=5){
                        for (pack in c0fs) {
                            PacketUtils.sendPacketNoEvent(pack)
                        }
                    }else{
                        (packet as C0FPacketConfirmTransaction?)?.let { c0fs.add(it) }
                    }
                }
                if (packet is C00PacketKeepAlive) {
                    if(c00s.size>=5){
                        for (pack2 in c00s) {
                            PacketUtils.sendPacketNoEvent(pack2)
                        }
                    }else{
                        (packet as C00PacketKeepAlive?)?.let { c00s.add(it) }
                    }
                }
            }

            "oldveruscombat" -> {
                if (packet is C0FPacketConfirmTransaction) {
                    if(currentTrans > 0) event.cancelEvent()
                    currentTrans++
                    debugMessage("Packet C0F (Trans=$currentTrans)")
                } else if(packet is C0BPacketEntityAction) {
                    event.cancelEvent()
                    debugMessage("Packet C0B")
                }
            }

            "oldveruscombat2" -> {
                if (packet is C0FPacketConfirmTransaction) {
                    if (!verus2Stat) {
                        packetBuffer.add(packet)
                        debugMessage("Add Packet")
                        event.cancelEvent()
                    } else {
                        verus2Stat = false
                    }
                }else if (packet is C00PacketKeepAlive) {
                    PacketUtils.sendPacketNoEvent(C00PacketKeepAlive(RandomUtils.nextInt(1, 2147483647)))
                    debugMessage("Keep Alive")
                    event.cancelEvent()
                }else if (packet is C03PacketPlayer) {
                    PacketUtils.sendPacketNoEvent(C0CPacketInput())
                    if (mc.thePlayer.ticksExisted % 15 == 0) {
                        packet.y += RandomUtils.nextInt(100, 1000)
                        debugMessage("Packet C03")
                    }
                }
            }

            "oldverusmove" -> {
                if (mc.thePlayer != null && mc.thePlayer.ticksExisted == 0) packetBuffer.clear()
                if (packet is C03PacketPlayer) {
                    // Set position to a valid block height (so Spoof NoFall works)
                    val yPos = (mc.thePlayer.posY / 0.015625).roundToInt() * 0.015625
                    mc.thePlayer.setPosition(mc.thePlayer.posX, yPos, mc.thePlayer.posZ)
                    if (mc.thePlayer.ticksExisted % 45 == 0) {
                        // Clip into ground and silently accept the teleport from the server. (This fucks with teleport compensation LOL)
                        PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true))
                        PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY - 11.725, mc.thePlayer.posZ, false))
                        PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true))
                    }
                } else if (packet is S08PacketPlayerPosLook) {
                    val x = packet.x - mc.thePlayer.posX
                    val y = packet.y - mc.thePlayer.posY
                    val z = packet.z - mc.thePlayer.posZ
                    val diff = sqrt(x * x + y * y + z * z)
                    // Cancel the teleport, and silently accept it.
                    if (diff <= 8) {
                        event.cancelEvent()
                        // LATEST verus ALWAYS expects a c06 within 30 seconds of a teleport if packets have been sent from the client after the teleport.
                        PacketUtils.sendPacketNoEvent(C06PacketPlayerPosLook(packet.x, packet.y, packet.z, packet.getYaw(), packet.getPitch(), true))
                    }
                } else if (packet is C0FPacketConfirmTransaction) {
                    for (i in 0..3) {
                        // Make sure to dupe packets 4 times, since it will match up with the missing packets while keeping the anticheat disabled, in order to bypass ping spoof checks
                        // why the fuck do they not checked duped transactions? LMFAO
                        packetBuffer.add(packet)
                    }
                    event.cancelEvent()
                }
            }

            "kauri" -> {
                if (packet is C0FPacketConfirmTransaction)
                    event.cancelEvent()
            }

            "riding" -> {
                if (packet is C03PacketPlayer)
                    mc.netHandler.addToSendQueue(C0CPacketInput(mc.thePlayer.moveStrafing, mc.thePlayer.moveForward, mc.thePlayer.movementInput.jump, mc.thePlayer.movementInput.sneak))
            }

            "basic" -> {
                if (packet is C0FPacketConfirmTransaction || packet is C00PacketKeepAlive)
                    event.cancelEvent()
            }

            "nogroundtouch" -> {
                if (packet is C03PacketPlayer)
                    packet.y += 0.125
            }

            "spectate" -> {
                if (packet is C03PacketPlayer)
                    mc.netHandler.addToSendQueue(C18PacketSpectate(mc.thePlayer.uniqueID))
            }
            
            "spectatespoof" -> {
                if (packet is C03PacketPlayer) {
                    packet.onGround = false

                    mc.netHandler.addToSendQueue(C18PacketSpectate(mc.thePlayer.uniqueID))
                    mc.netHandler.addToSendQueue(C13PacketPlayerAbilities(mc.thePlayer.capabilities))
                }
                if (packet is C13PacketPlayerAbilities) {
                    packet.isFlying = true
                    packet.isInvulnerable = true
                    packet.isAllowFlying = true
                    packet.isCreativeMode = false
                }
            }
            
            "spectatespoof2" -> {
                if (packet is C03PacketPlayer)
                    mc.netHandler.addToSendQueue(C18PacketSpectate(mc.thePlayer.uniqueID))
                if (packet is C13PacketPlayerAbilities) {
                    packet.isFlying = true
                    packet.isInvulnerable = true
                    packet.isAllowFlying = true
                    packet.isCreativeMode = false
                }
            }


            "flying" -> {
                if (packet is C03PacketPlayer) {
                    val capabilities=PlayerCapabilities() // flags=2
                    capabilities.disableDamage=false
                    capabilities.isFlying=true
                    capabilities.allowFlying=false
                    capabilities.isCreativeMode=false
                    mc.netHandler.addToSendQueue(C13PacketPlayerAbilities(capabilities))
                    debugMessage("Packet C13")
                }
            }
        
            "oldmatrix" -> {
                if(packet is C03PacketPlayer&&!(packet is C04PacketPlayerPosition||packet is C05PacketPlayerLook ||packet is C06PacketPlayerPosLook)){
                    event.cancelEvent()
                }
                if(packet is C02PacketUseEntity||packet is C04PacketPlayerPosition||packet is C05PacketPlayerLook
                    ||packet is C06PacketPlayerPosLook||packet is C07PacketPlayerDigging||packet is C08PacketPlayerBlockPlacement
                    ||packet is C0APacketAnimation||packet is C0BPacketEntityAction){
                    event.cancelEvent()
                    packetBuffer.add(packet as Packet<INetHandlerPlayServer>)
                }
            }
            
            "fakelag" -> {
                if(fakeLagDelay.hasTimePassed(lagDelayValue.get().toLong())) {
                    if(isSent && fakeLagSpoofValue.get()) {
                        PacketUtils.sendPacketNoEvent(C03PacketPlayer(true))
                        if(lagDurationValue.get()>=300) PacketUtils.sendPacketNoEvent(C03PacketPlayer(true))
                        isSent = false
                    }
                    if(packet is C00PacketKeepAlive||packet is C0FPacketConfirmTransaction) {
                        event.cancelEvent()
                        packetBuffer.add(packet as Packet<INetHandlerPlayServer>)
                    }
                    if(fakeLagAttackValue.get()&&(packet is C02PacketUseEntity||packet is C0APacketAnimation)) {
                        event.cancelEvent()
                        packetBuffer.add(packet as Packet<INetHandlerPlayServer>)
                        if(packet is C0APacketAnimation) return
                    }
                    if(fakeLagBlockValue.get()&&(packet is C07PacketPlayerDigging||packet is C08PacketPlayerBlockPlacement||packet is C0APacketAnimation)) {
                        event.cancelEvent()
                        packetBuffer.add(packet as Packet<INetHandlerPlayServer>)
                    }
                    if(fakeLagPosValue.get()&&(packet is C03PacketPlayer||packet is C04PacketPlayerPosition||packet is C05PacketPlayerLook||packet is C06PacketPlayerPosLook||packet is C0BPacketEntityAction)){
                        event.cancelEvent()
                        packetBuffer.add(packet as Packet<INetHandlerPlayServer>)
                    }
                }
            }
            

            "c13+infinitec0c" -> {
                PacketUtils.sendPacketNoEvent(C13PacketPlayerAbilities(mc.thePlayer.capabilities))
                PacketUtils.sendPacketNoEvent(C0CPacketInput(Float.MAX_VALUE, Float.MAX_VALUE, false, false))
            }
        }
    }

    private fun debugMessage(str: String){
        if(debug.get())
            chat(" [Disabler] $str")
    }

    override val tag: String
        get() = modeValue.get()
}
